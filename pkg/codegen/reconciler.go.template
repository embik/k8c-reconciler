{{- define "reconciler" -}}
// {{ .APIVersionPrefix }}{{ .ResourceName }}Reconciler defines an interface to create/update {{ .ResourceNamePlural }}.
type {{ .APIVersionPrefix }}{{ .ResourceName }}Reconciler = func(existing *{{ .ImportAlias }}.{{ .ResourceName }}) (*{{ .ImportAlias }}.{{ .ResourceName }}, error)

// Named{{ .APIVersionPrefix }}{{ .ResourceName }}ReconcilerFactory returns the name of the resource and the corresponding Reconciler function.
type Named{{ .APIVersionPrefix }}{{ .ResourceName }}ReconcilerFactory = func() (name string, create {{ .APIVersionPrefix }}{{ .ResourceName }}Reconciler)

// {{ .APIVersionPrefix }}{{ .ResourceName }}ObjectWrapper adds a wrapper so the {{ .APIVersionPrefix }}{{ .ResourceName }}Reconciler matches ObjectReconciler.
// This is needed as Go does not support function interface matching.
func {{ .APIVersionPrefix }}{{ .ResourceName }}ObjectWrapper(create {{ .APIVersionPrefix }}{{ .ResourceName }}Reconciler) ObjectReconciler {
	return func(existing ctrlruntimeclient.Object) (ctrlruntimeclient.Object, error) {
		if existing != nil {
			return create(existing.(*{{ .ImportAlias }}.{{ .ResourceName }}))
		}
		return create(&{{ .ImportAlias }}.{{ .ResourceName }}{})
	}
}

// Reconcile{{ .APIVersionPrefix }}{{ .ResourceNamePlural }} will create and update the {{ .APIVersionPrefix }}{{ .ResourceNamePlural }} coming from the passed {{ .APIVersionPrefix }}{{ .ResourceName }}Reconciler slice.
func Reconcile{{ .APIVersionPrefix }}{{ .ResourceNamePlural }}(ctx context.Context, namedFactories []Named{{ .APIVersionPrefix }}{{ .ResourceName }}ReconcilerFactory, namespace string, client ctrlruntimeclient.Client, objectModifiers ...ObjectModifier) error {
	for _, get := range namedFactories {
		name, create := get()
{{- if .DefaultingFunc }}
		create = {{ .DefaultingFunc }}(create)
{{- end }}
		createObject := {{ .APIVersionPrefix }}{{ .ResourceName }}ObjectWrapper(create)
		createObject = createWithNamespace(createObject, namespace)
		createObject = createWithName(createObject, name)

		for _, objectModifier := range objectModifiers {
			createObject = objectModifier(createObject)
		}

		if err := EnsureNamedObject(ctx, types.NamespacedName{Namespace: namespace, Name: name}, createObject, client, &{{ .ImportAlias }}.{{ .ResourceName }}{}, {{ .Recreate }}); err != nil {
			return fmt.Errorf("failed to ensure {{ .ResourceName }} %s/%s: %w", namespace, name, err)
		}
	}

	return nil
}
{{- end -}}
