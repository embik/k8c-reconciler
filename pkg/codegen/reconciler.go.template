{{- define "reconciler" -}}
// {{ .APIVersionPrefix }}{{ .ResourceName }}Reconciler defines an interface to create/update {{ .ResourceNamePlural }}.
type {{ .APIVersionPrefix }}{{ .ResourceName }}Reconciler = func(existing *{{ .ImportAlias }}.{{ .ResourceName }}) (*{{ .ImportAlias }}.{{ .ResourceName }}, error)

// Named{{ .APIVersionPrefix }}{{ .ResourceName }}ReconcilerFactory returns the name of the resource and the corresponding Reconciler function.
type Named{{ .APIVersionPrefix }}{{ .ResourceName }}ReconcilerFactory = func() (name string, reconciler {{ .APIVersionPrefix }}{{ .ResourceName }}Reconciler)

// {{ .APIVersionPrefix }}{{ .ResourceName }}ObjectWrapper adds a wrapper so the {{ .APIVersionPrefix }}{{ .ResourceName }}Reconciler matches ObjectReconciler.
// This is needed as Go does not support function interface matching.
func {{ .APIVersionPrefix }}{{ .ResourceName }}ObjectWrapper(reconciler {{ .APIVersionPrefix }}{{ .ResourceName }}Reconciler) {{ if not isInternal }}reconciling.{{ end }}ObjectReconciler {
	return func(existing ctrlruntimeclient.Object) (ctrlruntimeclient.Object, error) {
		if existing != nil {
			return reconciler(existing.(*{{ .ImportAlias }}.{{ .ResourceName }}))
		}
		return reconciler(&{{ .ImportAlias }}.{{ .ResourceName }}{})
	}
}

// Reconcile{{ .APIVersionPrefix }}{{ .ResourceNamePlural }} will create and update the {{ .APIVersionPrefix }}{{ .ResourceNamePlural }} coming from the passed {{ .APIVersionPrefix }}{{ .ResourceName }}Reconciler slice.
func Reconcile{{ .APIVersionPrefix }}{{ .ResourceNamePlural }}(ctx context.Context, namedFactories []{{ if not isInternal }}reconciling.{{ end }}Named{{ .APIVersionPrefix }}{{ .ResourceName }}ReconcilerFactory, namespace string, client ctrlruntimeclient.Client, objectModifiers ...{{ if not isInternal }}reconciling.{{ end }}ObjectModifier) error {
	for _, factory := range namedFactories {
		name, reconciler := factory()
{{- if .DefaultingFunc }}
		reconciler = {{ .DefaultingFunc }}(reconciler)
{{- end }}
		reconcileObject := {{ .APIVersionPrefix }}{{ .ResourceName }}ObjectWrapper(reconciler)
		reconcileObject = {{ if not isInternal }}reconciling.{{ end }}CreateWithNamespace(reconcileObject, namespace)
		reconcileObject = {{ if not isInternal }}reconciling.{{ end }}CreateWithName(reconcileObject, name)

		for _, objectModifier := range objectModifiers {
			reconcileObject = objectModifier(reconcileObject)
		}

		if err := {{ if not isInternal }}reconciling.{{ end }}EnsureNamedObject(ctx, types.NamespacedName{Namespace: namespace, Name: name}, reconcileObject, client, &{{ .ImportAlias }}.{{ .ResourceName }}{}, {{ .Recreate }}); err != nil {
			return fmt.Errorf("failed to ensure {{ .ResourceName }} %s/%s: %w", namespace, name, err)
		}
	}

	return nil
}
{{- end -}}
